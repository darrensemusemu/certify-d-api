openapi: "3.0.2"
info:
  title: API Title
  version: "1.0"
servers:
  - url: https://certify-d.darrensemusemu.dev/api/upload
    description: Staging 
  - url: http://localhost:8080/api
    description: Development 
paths:
  /health/alive:
    get:
      operationId: getServerAlive
      summary: Application liveness probe
      description: Check whether application is not in an unresponsive state
      tags:
        - health
      responses:
        "200":
          description: Application is running
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/HealthOk"
        default:
          $ref: "#/components/responses/Error"
  /health/ready:
    get:
      operationId: getServerReady
      summary: Application accepting requests
      description: Check application status & DB status'
      tags:
        - health
      responses:
        "200":
          description: Check whether the application is not in an unresponsive state
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/HealthOk"
        default:
          $ref: "#/components/responses/Error"
  /store:
    get:
      operationId: getStore
      summary: Get a list stores
      description: Gets a list of upload stores
      tags:
        - store
      parameters:
        - name: storeRef
          in: query
          schema:
            type: string
          description: Store reference
          required: true
      responses:
        "200":
          $ref: '#/components/responses/GetStoreResponse'
        default:
          $ref: "#/components/responses/Error"
    post:
      operationId: addStore
      summary: Create a store
      description: Create a store for set of related files
      tags:
        - store
      requestBody:
        $ref: "#/components/requestBodies/PostStoreRequest"
      responses:
        "201":
          $ref: "#/components/responses/PostStoreResponse"
        default:
          $ref: "#/components/responses/Error"
  /store/{storeId}:
    delete: 
      operationId: removeStoreById
      summary: Delete store
      description: Delete a store including all related files'
      tags:
        - store
      parameters:
        - in: path
          name: storeId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: No content
        default:
          $ref: "#/components/responses/Error"
  /store/{storeId}/file:
    post:
      operationId: removeStoreFiles
      summary: Upload file
      description: Upload a file to specific store
      tags:
        - store
      parameters:
        - in: path
          name: storeId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: "#/components/requestBodies/PostStoreFileRequest"
      responses:
        "201":
          $ref: "#/components/responses/PostStoreFileResponse"
        default:
          $ref: "#/components/responses/Error"   
  /store/{storeId}/file/{fileId}:
    delete: 
      operationId: removeStoreFileById
      summary: Delete file
      description: Delete a single file from a store
      tags:
        - store
      parameters:
        - in: path
          name: storeId
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: fileId
          schema:
            type: string
            format: uuid
          required: true
      responses:
        204:
          description: No content
        default:
          $ref: "#/components/responses/Error"
components:
  requestBodies:
    PostStoreRequest:
      description: 'Create store request body'
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - storeRef
            properties:
              storeRef:
                type: string
    PostStoreFileRequest:
      description: Uploads file/s
      required: true
      content:
        multipart/form-data:
          schema: 
            type: object
            required:
              - file
            properties:
              file:
                type: array
                items:
                  type: string
                  format: binary
                  minItems: 1
          encoding:
            file:
              contentType: image/png, image/png, application/pdf
  responses:
    Error:
      description: Error processing request
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/ProblemDetail"
    GetStoreResponse:
      description: 'A list of stores and files'
      content:
        application/json: 
          schema:
            type: array
            items:
              allOf:
                - $ref: "#/components/schemas/Store"
                - type: object
                  properties:
                    files:
                      type: array
                      items: 
                        $ref: "#/components/schemas/File"
    PostStoreResponse:
      description: 'Create store request body'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Store"
    PostStoreFileResponse:
      description: Result of uploded file
      content:
        "application/json":
          schema:
            type: array
            items:
              $ref: "#/components/schemas/File"
  schemas:
    File:
      type: object
      properties:
        id:
          type: string
          format: uuid
        filename:
          type: string
        numberOfPages:
          type: string
        type:
          type: string
        url:
          type: string
    Store:
      type: object
      properties:
        id:
          type: string
          format: uuid
        storeRef:
          type: string
    HealthOk:
      type: object
      readOnly: true
      additionalProperties: false
      properties:
        status:
          type: string
          maxLength: 32
          pattern: Ok
    ProblemDetail:
      description: A Problem Details object (RFC 7807)
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          format: uri
          description: An absolute URI that identifies the problem type
          default: about:blank # kept for backwards-compatibility, type will be mandatory in problem-v2
        href:
          type: string
          format: uri
          description: An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
        title:
          type: string
          description: A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
          example: Service Unavailable
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          minimum: 400
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          format: uri
          description: An absolute URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
      example: {
          "type": "urn:problem-type:belgif:payloadTooLarge",
          "href": "https://www.belgif.be/specification/rest/api-guide/problems/payloadTooLarge.html", # location of linked doc will change in the future to recommended URI structure
          "title": "Payload Too Large",
          "status": 413,
          "detail": "Request message must not be larger than 10 MB",
          "instance": "urn:uuid:123e4567-e89b-12d3-a456-426614174000",
        }
# "limit": 10485760  # additional properties specific to the problem type are allowed
