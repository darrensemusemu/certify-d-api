openapi: "3.0.2"
info:
  title: certify-d v1
  version: "1.0"
servers:
  - url: https://certify-d.darrensemusemu.dev/api/v1/user
    description: Staging 
  - url: http://localhost:8080/api/v1
    description: Development 
tags:
  - name: users
    description: Everything about users
paths:
  /health/alive:
    get:
      operationId: handleGetServerAlive
      summary: Application liveness probe
      description: Check whether application is not in an unresponsive state
      tags:
        - health
      responses:
        "200":
          description: Application is running
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/HealthOk"
        default:
          $ref: "#/components/responses/Error"
  /health/ready:
    get:
      operationId: handleGetServerReady
      summary: Application accepting requests
      description: Check application status & DB status'
      tags:
        - health
      responses:
        "200":
          description: Check whether the application is not in an unresponsive state
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/HealthOk"
        default:
          $ref: "#/components/responses/Error"
  /signUpUser:
    post:
      operationId: handleSignUpUser
      summary: Signs up a new user
      description: A new user is created and signed up on platform
      tags:
        - user
      responses:
        201:
          $ref: "#/components/responses/PostSignUpUserResponse"
      security:
        - KratosBearerAuth: []
# security:
#   - {}
components:
  responses:
    PostSignUpUserResponse:
      description: User is signed up
    Error:
      description: Error processing request
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/ProblemDetail"
  schemas:
    HealthOk:
      type: object
      readOnly: true
      additionalProperties: false
      properties:
        status:
          type: string
          maxLength: 32
          pattern: Ok
    ProblemDetail:
      description: A Problem Details object (RFC 7807)
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          format: uri
          description: An absolute URI that identifies the problem type
          default: about:blank  # kept for backwards-compatibility, type will be mandatory in problem-v2
        href:
          type: string
          format: uri
          description: An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
        title:
          type: string
          description: A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
          example: Service Unavailable
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          minimum: 400
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          format: uri
          description: An absolute URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
      example:
        {
          "type": "urn:problem-type:belgif:payloadTooLarge",
          "href": "https://www.belgif.be/specification/rest/api-guide/problems/payloadTooLarge.html", # location of linked doc will change in the future to recommended URI structure
          "title": "Payload Too Large",
          "status": 413,
          "detail": "Request message must not be larger than 10 MB",
          "instance": "urn:uuid:123e4567-e89b-12d3-a456-426614174000",
          # "limit": 10485760  # additional properties specific to the problem type are allowed
        }
  securitySchemes:
    KratosBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Kratos identity session
